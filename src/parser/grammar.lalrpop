use std::str::FromStr;

use crate::syntax::loc::*;
use crate::syntax::names::Interned;
use crate::parser::trees::*;
use crate::parser::lex::*;
use crate::parser::tokens::*;
use crate::parser::either::*;

use num::bigint::BigInt;
use num::rational::BigRational;

grammar<'err>(
    errors: &'err mut Vec<Located<String>>
);

pub Root: Root = {
    Semi<Sp<ModuleMember>> => Root { defs: <> }
}

ModuleDef: ModuleDef = {
    <attrs:Attrs*> "module" <name:IdName> <defs:OptBlock<Sp<ModuleMember>>> => 
        ModuleDef { attrs, name, defs }
};

ModuleMember: Def = {
    ModuleDef => { Def::Module(<>) },
    StructDef => { Def::Struct(<>) },
    EnumDef => { Def::Enum(<>) },
    TraitDef => { Def::Trait(<>) },
    FunDef => { Def::Fun(<>) },
    LetDef => { Def::Let(<>) },
    VarDef => { Def::Var(<>) },
    Import => { Def::Import(<>) },
    <l:@L> <x:!> <r:@R> => { 
        println!("bad def {:?}", x);
        errors.push(Located::new(Loc::span(l, r), "Expected a definition, not this thing.".to_string())); 
        Def::Error 
    }
};

StructDef: StructDef = {
    <attrs:Attrs*> "struct" <body:StructBody> => StructDef { attrs, ..body },
};

Attrs: Located<Attr> = {
    "#" <attr:Sp<AttrPrimary>> ";"? => attr
}

AttrPrimary: Attr = {
    "[" <l:@L> <attrs:Comma<Sp<Attr>>> <r:@R> "]" => Attr::Brackets(box Located::new(Loc::span(l, r), Attr::CommaSeq(attrs))),
    "(" <l:@L> <attrs:Comma<Sp<Attr>>> <r:@R> ")" => Attr::Parens(box Located::new(Loc::span(l, r), Attr::CommaSeq(attrs))),
    "{" <l:@L> <attrs:Comma<Sp<Attr>>> <r:@R> "}" => Attr::Braces(box Located::new(Loc::span(l, r), Attr::CommaSeq(attrs))),
    <l:@L> "[" "]" <r:@R> => Attr::Brackets(box Located::new(Loc::span(l, r), Attr::CommaSeq(vec![]))),
    <l:@L> "(" ")" <r:@R> => Attr::Parens(box Located::new(Loc::span(l, r), Attr::CommaSeq(vec![]))),
    <l:@L> "{" "}" <r:@R> => Attr::Braces(box Located::new(Loc::span(l, r), Attr::CommaSeq(vec![]))),
}

Attr: Attr = {
    <attrs:Sp<Attr0>+> => {
        if attrs.len() == 1 {
            attrs.first().unwrap().value.clone()
        }
        else {
            Attr::Seq(attrs)
        }
    }
};

Attr0: Attr = {
    "->" => Attr::Arrow,
    "<-" => Attr::Backarrow,
    ":" => Attr::Colon,
    "." => Attr::Dot,
    "=" => Attr::Eq,
    <name:Id> => Attr::Part { name },
    <name:Op> => Attr::Part { name },
    "in" => Attr::In,
    "out" => Attr::Out,
    "enum" => Attr::Enum,
    "else" => Attr::Else,
    "for" => Attr::For,
    "fun" => Attr::Fun,
    "if" => Attr::If,
    "import" => Attr::Import,
    "struct" => Attr::Struct,
    "trait" => Attr::Trait,
    "module" => Attr::Module,
    "let" => Attr::Let,
    "var" => Attr::Var,
    "match" => Attr::Match,
    "where" => Attr::Where,
    "string" => Attr::Lit { lit: Lit::String { value: <> } },
    "char" => Attr::Lit { lit: Lit::Char { value: <> } },
    "int" => Attr::Lit { lit: Lit::Int { value: <>.0 } },
    "rational" => Attr::Lit { lit: Lit::Rat { value: <>.0 } },
    "_" => Attr::Lit { lit: Lit::Wildcard },
    AttrPrimary => <>,
}

StructBody: StructDef = {
    <name:IdName> <g:Sp<Guard>?> <defs:OptBlock<Sp<StructMember>>> =>
        StructDef { attrs: vec![], name, params: vec![], opt_guard: g, defs },
    <h:Header<Sp<FunParam>>> <g:Sp<Guard>?> <defs:OptBlock<Sp<StructMember>>> =>
        StructDef { attrs: vec![], name: h.0, params: h.1, opt_guard: g, defs },
};

EnumDef: EnumDef = {
    <attrs:Attrs*> "enum" <body:EnumBody> => EnumDef { attrs, ..body },
};

EnumBody: EnumDef = {
    <name:IdName> <defs:OptBlock<Sp<EnumMember>>> =>
        EnumDef { attrs: vec![], name, params: vec![], defs },
    <h:Header<Sp<TyvarParam>>> <defs:OptBlock<Sp<EnumMember>>> =>
        EnumDef { attrs: vec![], name: h.0, params: h.1, defs },
};

TraitDef: TraitDef = {
    <attrs:Attrs*> "trait" <body:TraitBody> => TraitDef { attrs, ..body },
};

TraitBody: TraitDef = {
    <name:IdName> <supers:OptSupers> <defs:OptBlock<Sp<TraitMember>>> => 
        TraitDef { attrs: vec![], name, params: vec![], supers: supers, defs },
    <h:Header<Sp<TyParam>>> <supers:OptSupers> <defs:OptBlock<Sp<TraitMember>>> =>
        TraitDef { attrs: vec![], name: h.0, params: h.1, supers: supers, defs },
};

OptSupers: Vec<Located<Type>> = {
    <supers:Supers?> => supers.unwrap_or(vec![]),
}

Supers: Vec<Located<Type>> = {
    //"where" "(" <tys:Comma<Sp<Type>>> ")" => tys,
    "where" <ty:Sp<TypePrimary>> => vec![ty],
}

StructMember: StructMember = {
    LetDef => StructMember::Let(<>),
    VarDef => StructMember::Var(<>),
};

EnumMember: StructDef = {
    StructBody
};

TraitMember: TraitMember = {
    FunDef => TraitMember::Fun(<>),
    LetDef => TraitMember::Let(<>),
    VarDef => TraitMember::Var(<>),
    Import => TraitMember::Import(<>),
};

LetDef: LetDef = {
    <attrs:Attrs*> "let" <formula:Sp<Term>> => { LetDef { attrs, formula } }
};

VarDef: VarDef = {
    <attrs:Attrs*> "var" <formula:Sp<Term>> => { VarDef { attrs, formula } }
};

RetType: Located<Type> = {
    "->" <ty:Sp<Type>> => ty,
}


FunDef: FunDef = {
    <attrs:Attrs*> "fun" <name:IdName> <ret_type:RetType?> <opt_guard:Sp<Guard>?> <r:@R> =>
        FunDef { 
            attrs, 
            name, 
            opt_guard, 
            opt_body: None, 
            params: vec![], 
            ret: Located::new(
                r,
                Param { 
                    attr: ParamAttr { 
                        attrs: vec![], 
                        assoc: Assoc::NonAssoc, 
                        by_name: CallingConv::ByValue, 
                        mode: CallingMode::Input 
                    }, 
                    term: box Located::new(r, Exp::Lit { lit: Lit::Nothing })
                } 
            ),
            ret_type,
        },
    <attrs:Attrs*> "fun" <name:IdName> <ret_type:RetType?> <opt_guard:Sp<Guard>?> "=" <term:Sp<Term>> =>
        FunDef { 
            attrs, 
            name, 
            opt_guard, 
            opt_body: None, 
            params: vec![], 
            ret: Located::new(
                term.loc,
                Param { 
                    attr: ParamAttr { 
                        attrs: vec![], 
                        assoc: Assoc::NonAssoc, 
                        by_name: CallingConv::ByValue, 
                        mode: CallingMode::Input 
                    }, 
                    term: box term 
                } 
            ),
            ret_type,
        },
    <attrs:Attrs*> "fun" <name:IdName> <ret_type:RetType?> <opt_guard:Sp<Guard>?> "=" <ret:Sp<ModalRet>> <opt_body:Sp<Guard>?> =>
        FunDef { 
            attrs, 
            name, 
            opt_guard, 
            opt_body, 
            params: vec![], 
            ret,
            ret_type,
        },
    <attrs:Attrs*> "fun" <header:Header<Sp<FunParam>>> <ret_type:RetType?> <opt_guard:Sp<Guard>?> <r:@R> =>
        FunDef { 
            attrs, 
            name: header.0, 
            opt_guard, 
            opt_body: None, 
            params: header.1, 
            ret: Located::new(
                r,
                Param { 
                    attr: ParamAttr { 
                        attrs: vec![], 
                        assoc: Assoc::NonAssoc, 
                        by_name: CallingConv::ByValue, 
                        mode: CallingMode::Input 
                    }, 
                    term: box Located::new(r, Exp::Lit { lit: Lit::Nothing })
                }
            ),
            ret_type,
        },
    <attrs:Attrs*> "fun" <header:Header<Sp<FunParam>>> <ret_type:RetType?> <opt_guard:Sp<Guard>?> "=" <term:Sp<Term>> =>
        FunDef { 
            attrs, 
            name: header.0, 
            opt_guard, 
            opt_body: None, 
            params: header.1, 
            ret: Located::new(
                term.loc,
                Param { 
                    attr: ParamAttr { 
                        attrs: vec![], 
                        assoc: Assoc::NonAssoc, 
                        by_name: CallingConv::ByValue, 
                        mode: CallingMode::Input 
                    }, 
                    term: box term 
                }
            ),
            ret_type,
        },
    <attrs:Attrs*> "fun" <header:Header<Sp<ModalParam>>> <ret_type:RetType?> <opt_guard:Sp<Guard>?> "=" <ret:Sp<ModalRet>> <opt_body:Sp<Guard>?> =>
        FunDef { 
            attrs,
            name: header.0, 
            opt_guard, 
            opt_body, 
            params: header.1, 
            ret,
            ret_type,
        },
}

#[inline]
Header<T>: (Name, Vec<T>) = {
    <header:Header0<T>> => {
        (Name(header.0), header.1)
    }
}

#[inline]
Header0<T>: (Vec<Part>, Vec<T>) = {
    <rules:T+> <part:Part> <rest:Rest<T>*> => {
        let mut ps = vec![];
        let mut rs = vec![];
        for r in rules {
            ps.push(Part::Placeholder);
            rs.push(r);
        }
        ps.push(part);
        for r in rest {
            match r {
                Either::Left(p) => {
                    ps.push(p);
                }
                Either::Right(r) => {
                    ps.push(Part::Placeholder);
                    rs.push(r);
                }
            }
        }
        (ps, rs)
    },
    <parts:Part+> <rule:T> <rest:Rest<T>*> =>  {
        let mut ps = vec![];
        let mut rs = vec![];
        for p in parts {
            ps.push(p);
        }
        rs.push(rule);
        for r in rest {
            match r {
                Either::Left(p) => {
                    ps.push(p);
                }
                Either::Right(r) => {
                    ps.push(Part::Placeholder);
                    rs.push(r);
                }
            }
        }
        (ps, rs)
    },
}

#[inline]
Rest<T>: Either<Part, T> = {
    Part => Either::Left(<>),
    T => Either::Right(<>),
}

Part: Part = {
    Id,
    Op,
}

Guard: Exp = {
    "where" <e:Mixfix> => e,
    "where" <e:BlockExp> => e
};

BlockExp: Exp = {
    <es:Block<Sp<Term>>> => Exp::Block { body: es }
}

// TODO: the semantic action has to decide if the term is a single term and is parenthesized. In this case, it should change the Assoc.
FunParam: Param = {
    "(" <attrs:Attrs*> <term:Box<Sp<Tuple>>> ")" =>
        Param { attr: ParamAttr { attrs, assoc: Assoc::NonAssoc, by_name: CallingConv::ByValue, mode: CallingMode::Input }, term: term },
};

TyParam: TypeParam = {
    "(" <attrs:Attrs*> <ty:Box<Sp<TyTuple>>> ")" => {
        TypeParam { attr: TypeParamAttr { attrs, assoc: Assoc::NonAssoc }, ty }
    },
};

Kind: Kind = {
    "type" => Kind::Type,
    "type" "->" <k:Box<Kind>> => Kind::Fun(box Kind::Type, k),
    "(" <k:Kind> ")" => k,
}

TyvarParam: TypeParam = {
    "(" <attrs:Attrs*> <x:Sp<IdName>> ")" => 
        TypeParam { attr: TypeParamAttr { attrs, assoc: Assoc::NonAssoc }, ty: box Located::new(x.loc, Type::Var(x.value)) },
    "(" "(" <attrs:Attrs*> <x:Sp<IdName>> ")" ")" =>
        TypeParam { attr: TypeParamAttr { attrs, assoc: Assoc::Assoc }, ty: box Located::new(x.loc, Type::Var(x.value)) },
    "(" <attrs:Attrs*> <x:Sp<IdName>> ":" <kind:Sp<Kind>> ")" => 
        TypeParam { attr: TypeParamAttr { attrs, assoc: Assoc::NonAssoc }, ty: box Located::new(x.loc, Type::Kinded(box Located::new(x.loc, Type::Var(x.value)), kind)) },
    "(" "(" <attrs:Attrs*> <x:Sp<IdName>> ":" <kind:Sp<Kind>> ")" ")" =>
        TypeParam { attr: TypeParamAttr { attrs, assoc: Assoc::Assoc }, ty: box Located::new(x.loc, Type::Kinded(box Located::new(x.loc, Type::Var(x.value)), kind)) },
};

#[inline]
Tuple: Exp = <es:Comma<Sp<Term>>> => Exp::Tuple { es };

#[inline]
TyTuple: Type = <tys:Comma<Sp<Type>>> => Type::Tuple(tys);

ModalParam: Param = {
    "(" "in" <attrs:Attrs*> <term:Box<Sp<Tuple>>> ")" =>
        Param { attr: ParamAttr { attrs, assoc: Assoc::NonAssoc, by_name: CallingConv::ByValue, mode: CallingMode::Input }, term: term },
    "(" "(" "in" <attrs:Attrs*> <term:Box<Sp<Tuple>>> ")" ")" =>
        Param { attr: ParamAttr { attrs, assoc: Assoc::Assoc, by_name: CallingConv::ByValue, mode: CallingMode::Input }, term: term },
    "(" "out" <attrs:Attrs*> <term:Box<Sp<Tuple>>> ")" =>
        Param { attr: ParamAttr { attrs, assoc: Assoc::NonAssoc, by_name: CallingConv::ByValue, mode: CallingMode::Output }, term: term },
    "(" "(" "out" <attrs:Attrs*> <term:Box<Sp<Tuple>>> ")" ")" =>
        Param { attr: ParamAttr { attrs, assoc: Assoc::Assoc, by_name: CallingConv::ByValue, mode: CallingMode::Output }, term: term },
};

ModalRet: Param = {
    "(" "in" <attrs:Attrs*> <term:Box<Sp<Tuple>>> ")" => 
        Param { attr: ParamAttr { attrs, assoc: Assoc::NonAssoc, by_name: CallingConv::ByValue, mode: CallingMode::Input }, term: term },
    "(" "out" <attrs:Attrs*> <term:Box<Sp<Tuple>>> ")" =>
        Param { attr: ParamAttr { attrs, assoc: Assoc::NonAssoc, by_name: CallingConv::ByValue, mode: CallingMode::Output }, term: term },
};

Type: Type = {
    <ty:Sp<TypeMixfix>> ":" <k:Sp<Kind>> => Type::Kinded(box ty, k),
    <arg:Sp<TypeMixfix>> <ret:Box<RetType>?> =>
        match ret {
            None => arg.value,
            Some(ret) => Type::Fun(box arg, ret),
        }
}

TypeMixfix: Type = {
    Sp<TypePrimary>+ => Type::Mixfix(<>)
}

TypePrimary: Type = {
    Part => Type::Part(<>),
    <l:@L> <x:MixfixName> <r:@R> => Type::Path(Path::Member(box Located::new(Loc::span(l, r), Path::Root), x)),
    FullPath => Type::Path(<>),
    <p:Path> "." "(" <tys:Sp<TypePrimary>+> ")" => Type::SelectMixfix(p, tys),
    "(" <tys:Comma<Sp<Type>>> ")" => Type::Tuple(tys),
    "(" ")" => Type::Tuple(vec![]),
    "[" <ty:Box<Sp<Type>>> "]" => Type::List(ty),
}

Import: Import = {
    "import" <path:Sp<Path>> "." <selector:Selector> => 
        Import { path, selector },
    "import" <p:Sp<Path>> => {
        match p.value {
            Path::Root => { 
                errors.push(Located::new(p.loc, "cannot import the root path".to_string())); 
                Import { path: p, selector: vec![] }
            },
            Path::Member(box p, x) => {
                let loc = p.loc;
                Import { path: p, selector: vec![Located::new(loc, Selector::Including(x))] }
            }
        }
    },
    "import" <x:Sp<"_">> => 
        Import { path: Located { loc: x.loc, value: Path::Root }, selector: vec![Located::new(x.loc, Selector::All)] },
    "import" <l:@L>  "(" ")" <r:@R> =>
        Import { path: Located { loc: Loc::span(l, r), value: Path::Root }, selector: vec![Located::new(Loc::span(l, r), Selector::None)] },
}

Selector: Vec<Located<Selector>> = {
    <l:@L> "_" <r:@R> => vec![Located::new(Loc::span(l, r), Selector::All)],
    <l:@L> "(" ")" <r:@R> => vec![Located::new(Loc::span(l, r), Selector::None)],
    "(" <Comma<Sp<BaseSelector>>> ")" => <>,
}

BaseSelector: Selector = {
    <x:Name> => Selector::Including(x),
    <x:Name> "->" <y:Name> => Selector::Renaming(x, y),
    <x:Name> "->" "(" ")" => Selector::Excluding(x),
    "_" => Selector::All,
}

Path: Path = {
    <l:@L> <x:Name> <r:@R> => Path::Member(box Located::new(Loc::span(l, r), Path::Root), x),
    FullPath,
}

FullPath: Path = {
    <p:Sp<Path>> "." <x:Name> => Path::Member(box p, x),
}

Term: Exp = {
    If,
    Let,
    Var,
    For,
    Match,
    Cond,
    While,
    DoWhile,
    Lambda,
    BlockExp,
    Term1,
    <l:@L> <x:!> <r:@R> => { 
        println!("bad term {:?}", x);
        errors.push(Located::new(Loc::span(l, r), "Expected an expression, not whatever this is.".to_string())); 
        Exp::Error 
    }
};

Mixfix: Exp = {
    Sp<Select>+ => Exp::Mixfix { es: <> },
};

Term1: Exp = {
    <lhs:Box<Sp<Mixfix>>> "=" <rhs:Box<Sp<Term>>> => 
        Exp::Bind { lhs, rhs },
    <lhs:Box<Sp<Mixfix>>> "<-" <rhs:Box<Sp<Term>>> =>
        Exp::Generator { lhs, rhs },
    <pat:Box<Sp<Mixfix>>> "where" <guard:Box<Sp<Term>>> =>
        Exp::Where { pat, guard },
    <e:Box<Sp<Mixfix>>> ":" <ty:Box<Sp<Type>>> =>
        Exp::Ascribe { e, ty },
    Mixfix => <>,
};

If: Exp = {
    "if" <formula:Box<Sp<Term1>>> <body:Block<Sp<Term>>> => 
        Exp::Let { formula, body, otherwise: vec![] },
    "if" <formula:Box<Sp<Term1>>> <body:Block<Sp<Term>>> "else" <otherwise:Block<Sp<Term>>> =>
        Exp::Let { formula, body, otherwise },
};

While: Exp = {
    "while" <cond:Box<Sp<Term1>>> <body:Block<Sp<Term>>> => 
        Exp::While { cond, body },
};

DoWhile: Exp = {
    "do" <body:Block<Sp<Term>>> "while" <cond:Box<Sp<Mixfix>>> => 
        Exp::DoWhile { body, cond },
};

Let: Exp = {
    "let" <formula:Box<Sp<Term1>>> <body:Block<Sp<Term>>> => 
        Exp::Let { formula, body, otherwise: vec![] },
    "let" <formula:Box<Sp<Term1>>> <body:Block<Sp<Term>>> "else" <otherwise:Block<Sp<Term>>> =>
        Exp::Let { formula, body, otherwise },
};

Var: Exp = {
    "var" <formula:Box<Sp<Term1>>> <body:Block<Sp<Term>>> =>
        Exp::LetVar { formula, body, otherwise: vec![] },
    "var" <formula:Box<Sp<Term1>>> <body:Block<Sp<Term>>> "else" <otherwise:Block<Sp<Term>>> =>
        Exp::LetVar { formula, body, otherwise },
};

For: Exp = {
    "for" <formula:Box<Sp<Term1>>> <body:Block<Sp<Term>>> =>
        Exp::For { formula, body, otherwise: vec![] },
    "for" <formula:Box<Sp<Term1>>> <body:Block<Sp<Term>>> "else" <otherwise:Block<Sp<Term>>> =>
        Exp::For { formula, body, otherwise },
};

Match: Exp = {
    "match" <value:Box<Sp<Term1>>> <cases:Block<Sp<Case>>> =>
        Exp::Match { value, cases },
}

Cond: Exp = {
    "if" <cases:Block<Sp<Case>>> =>
        Exp::Cond { cases }
}

Case: Exp = {
    <p:Sp<Mixfix>> <g:Box<Sp<Guard>>?> "->" <e:Box<Sp<Term>>> =>
        Exp::Lambda { params: vec![p], opt_guard: g, ret: e }, 
};

Select: Exp = {
    <p:Sp<Path>> "." "(" <es:Sp<Select>+> ")" =>
        Exp::SelectMixfix { module: box p, es },
    <p:Sp<FullPath>> => {
        match p.value {
            Path::Root => { errors.push(Located::new(p.loc, "invalid root path".to_string())); Exp::Error }
            Path::Member(box p, x) => {
                match p.value {
                    Path::Root => Exp::Name { name: x },
                    _ => Exp::Select { module: box p, name: x },
                }
            }
        }
    },
    <Part> => Exp::Part { part: <> },
    <Primary> => <>,
};

Primary: Exp = {
    <x:MixfixName> => Exp::Var { name: x },
    Lit => <>,
    "(" <es:Comma<Sp<Term>>> ")" => Exp::Tuple { es },
    "[" <es:Comma<Sp<Term>>> "]" => Exp::List { es },
};

Lambda: Exp = {
    "fun" <ps:Sp<LambdaParam>*> <g:Box<Sp<Guard>>?> "->" <e:Box<Sp<Term>>> =>
        Exp::Lambda { params: ps, opt_guard: g, ret: e }, 
};

LambdaParam: Exp = {
    "(" <e:Term> ")" => e,
    <name:IdName> => Exp::Unknown { name },
};

Name: Name = {
    Id => Name(vec![<>]),
    MixfixName,
};

MixfixName: Name = {
    "`" <ps:PartOrPlaceholder+> "`" => Name(ps),
};

PartOrPlaceholder: Part = {
    "_" => Part::Placeholder,
    Part,
};

Lit: Exp = {
    "string" => Exp::Lit { lit: Lit::String { value: <> } },
    "char" => Exp::Lit { lit: Lit::Char { value: <> } },
    "int" => Exp::Lit { lit: Lit::Int { value: <>.0 } },
    "rational" => Exp::Lit { lit: Lit::Rat { value: <>.0 } },
    "_" => Exp::Lit { lit: Lit::Wildcard },
    "(" ")" => Exp::Lit { lit: Lit::Nothing },
    "[" "]" => Exp::List { es: vec![] },
};

#[inline]
OptBlock<T>: Vec<T> = {
    <Block<T>?> => {
        match <> {
            None => vec![],
            Some(ts) => ts,
        }
    }
}

Block<T>: Vec<T> =
    "{" ";"? <rules: (<T> ";"+)*> <last: T?> "}" => {
        let mut rules = rules;
        rules.extend(last);
        rules
    };

Comma<T>: Vec<T> =
    <rules: (<T> ",")*> <last: T> => {
        let mut rules = rules;
        rules.push(last);
        rules
    };

Semi<T>: Vec<T> =
    <rules: (<T> ";"+)*> <last: T> => {
        let mut rules = rules;
        rules.push(last);
        rules
    };

#[inline]
Sp<T>: Located<T> =
    <l: @L> <rule: T> <r: @R> =>
        Located::new(Loc::span(l, r), rule);

#[inline]
Box<T>: Box<T> =
    <rule: T> => box rule;

IdStr: Interned = {
    "identifier" => Interned::new(&<>),
};

OpStr: Interned = {
    "operator" => Interned::new(&<>),
};

#[inline]
IdName: Name = {
    Id => Name(vec![<>])
}

Id: Part = {
    IdStr => Part::Id(<>)
};

Op: Part = {
    OpStr => Part::Op(<>)
};


// Tokens


extern {
    type Location = Loc;
    type Error = Located<String>;

    enum Token {
        "identifier" => Token::Id(<String>),
        "operator" => Token::Op(<String>),
        "string" => Token::String(<String>),
        "char" => Token::Char(<char>),
        "int" => Token::Int(<BigInt>, <String>),
        "rational" => Token::Rat(<BigRational>, <String>),

        "else" => Token::Else,
        "enum" => Token::Enum,
        "module" => Token::Module,
        "type" => Token::Type,
        "for" => Token::For,
        "if" => Token::If,
        "while" => Token::While,
        "do" => Token::Do,
        "let" => Token::Let,
        "var" => Token::Var,
        "fun" => Token::Fun,
        "struct" => Token::Struct,
        "trait" => Token::Trait,
        "where" => Token::Where,
        "import" => Token::Import,
        "match" => Token::Match,
        "in" => Token::In,
        "out" => Token::Out,

        "@" => Token::At,
        ":" => Token::Colon,
       // "::" => Token::ColonColon,
        "#" => Token::Hash,
        "," => Token::Comma,
        "." => Token::Dot,
        "=" => Token::Eq,
        "->" => Token::Arrow,
        "<-" => Token::Backarrow,
        "`" => Token::Tick,
        "_" => Token::Underscore,

        "{" => Token::Lc,
        "[" => Token::Lb,
        "(" => Token::Lp,

        "}" => Token::Rc,
        "]" => Token::Rb,
        ")" => Token::Rp,

        ";" => Token::Semi,
    }
}
